<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://kalnytskyi.com</id>
  <title>Ihor Kalnytskyi</title>
  <updated>2022-04-23T18:30:39.392645+00:00</updated>
  <link href="https://kalnytskyi.com/feed.xml" rel="self" type="application/atom+xml"/>
  <link href="https://kalnytskyi.com" rel="alternate" type="text/html"/>
  <generator uri="https://github.com/ikalnytskyi/holocron" version="0.4.0">Holocron/v0.4.0</generator>
  <subtitle>Ihor Kalnytskyi's thoughts &amp; writings</subtitle>
  <entry>
    <id>https://kalnytskyi.com/posts/setup-wireguard-systemd-networkd/</id>
    <title>Setup a WireGuard server using systemd-networkd</title>
    <updated>2022-04-23T18:30:39.393447+00:00</updated>
    <author>
      <name>Ihor Kalnytskyi</name>
    </author>
    <content type="html">&lt;p&gt;WireGuard is an extremely simple, fast and modern VPN that is built into Linux
kernel 5.6 (released on Mar 29, 2020) and above. It mimics the model of SSH and
requires VPN peers to know each others public keys. I highly recommend to read
&lt;a href="https://www.wireguard.com"&gt;https://www.wireguard.com&lt;/a&gt; regardless of this post.&lt;/p&gt;
&lt;p&gt;When it comes to WireGuard, there's one interesting aspect: it has no notion of
'server', it's distributed by design and no blockchain is involved. Blockchain
enthusiasts may found this surprising but distributed software were invented
long before the blockchain ðŸ˜…. Each peer may connect to other peers assuming
they know each other (i.e. public key, IP) and there's a connectivity between
them. The 'server' is rather a behaviour one may expect from a certain peer.
There are 3 key points that are normally expected from a 'server' peer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The peer is publicly available, so other peers may connect to it even when
behind SNAT.&lt;/li&gt;
&lt;li&gt;The peer can act as a proxy and connect other peers into a single network.&lt;/li&gt;
&lt;li&gt;The peer can act as a gateway to the Internet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are number of ways to configure WireGuard on a Linux machine. My favorite
one is to use &lt;a href="https://man.archlinux.org/man/systemd-networkd.8.en"&gt;systemd-networkd&lt;/a&gt;, a system service that manages both networks
and network devices. It's distributed as part of systemd suite, so most likely
you have it installed, and it supports WireGuard starting with v237. This is a
good choice for a Linux server because it requires no extra software.&lt;/p&gt;
&lt;p&gt;For instance we want to setup the following VPN network:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align:left"&gt;Option&lt;/th&gt;
&lt;th style="text-align:left"&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;Network&lt;/td&gt;
&lt;td style="text-align:left"&gt;&lt;code&gt;10.0.0.0/24&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;Server&lt;/td&gt;
&lt;td style="text-align:left"&gt;&lt;code&gt;10.0.0.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;Peer A&lt;/td&gt;
&lt;td style="text-align:left"&gt;&lt;code&gt;10.0.0.20&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;Peer B&lt;/td&gt;
&lt;td style="text-align:left"&gt;&lt;code&gt;10.0.0.30&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;First thing to do is to set up a virtual network device for a WireGuard tunnel.
This can be achieved by means of a &lt;a href="https://man.archlinux.org/man/systemd.netdev.5"&gt;systemd.netdev(5)&lt;/a&gt; unit
that must be created in &lt;code&gt;/etc/systemd/network/&lt;/code&gt; directory. The WireGuard
network device must know about number of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The port to accept new connections on.&lt;/li&gt;
&lt;li&gt;The private key of the server.&lt;/li&gt;
&lt;li&gt;The list of known peers and their public keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is how some &lt;code&gt;/etc/systemd/network/wg0.netdev&lt;/code&gt; could look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ini"&gt;&lt;span class="k"&gt;[NetDev]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;wg0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;Kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;wireguard&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;wg0 - wireguard tunnel&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[WireGuard]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;ListenPort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;51820&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;PrivateKeyFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/etc/systemd/network/wg0.key&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[WireGuardPeer]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;AllowedIPs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10.0.0.20/32&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;PublicKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;9vzzasvYciJLmhjrt9Aj9aQYe1gnUxI44ShVLQPrDQA=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[WireGuardPeer]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;AllowedIPs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10.0.0.30/32&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;PublicKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;9vzzasvYciJLmhjrt9Aj9aQYe1gnUxI44ShVLQPrDQA=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The content of &lt;code&gt;/etc/systemd/network/wg0.key&lt;/code&gt; can be generated by invoking
&lt;code&gt;$ wg genkey&lt;/code&gt; command and must be readable by the &lt;code&gt;systemd-network&lt;/code&gt; user.
What's notable here is that &lt;code&gt;wg&lt;/code&gt; can be executed anywhere, even on your laptop,
there's no need to install extra software on the server.&lt;/p&gt;
&lt;p&gt;Next thing to do is to use a &lt;a href="https://man.archlinux.org/man/systemd.network.5"&gt;systemd.network(5)&lt;/a&gt; unit to
setup a network. The purpose of the network is to assign a proper IP address on
the network device, set proper routes, etc.&lt;/p&gt;
&lt;p&gt;This how some &lt;code&gt;/etc/systemd/network/wg0.network&lt;/code&gt; could look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ini"&gt;&lt;span class="k"&gt;[Match]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;wg0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[Network]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;Address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10.0.0.1/24&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;IPForward&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;IPMasquerade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are couple of things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since &lt;code&gt;/24&lt;/code&gt; network mask is used, systemd-networkd will automatically add a
route for the whole network to be routed via the WireGuard tunnel. Without
that mask, it'd be up to a user to configure routing.&lt;/li&gt;
&lt;li&gt;Both &lt;code&gt;IPForward&lt;/code&gt; and &lt;code&gt;IPMasquerade&lt;/code&gt; are only needed if the server is
expected to be used as a gateway to the Internet. Without these options,
it'd be up to a user to configure the firewall.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When both the network device and the network are configured, the only remained
step is to execute &lt;code&gt;$ networkctl reload&lt;/code&gt; to pipe in and apply latest
configuration.&lt;/p&gt;
</content>
    <link href="https://kalnytskyi.com/posts/setup-wireguard-systemd-networkd/" rel="alternate"/>
    <published>2022-02-07T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://kalnytskyi.com/posts/setup-cors-caddy-2/</id>
    <title>Setup CORS in Caddy 2</title>
    <updated>2022-04-23T18:30:39.393751+00:00</updated>
    <author>
      <name>Ihor Kalnytskyi</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://caddyserver.com/"&gt;Caddy 2&lt;/a&gt; is an open source web server with automatic HTTPS. It's a wise choice
for pet projects or self-hosted services, since you are free from managing TLS
certs on your own and wiring things together can be super annoying.&lt;/p&gt;
&lt;p&gt;One missing feature in Caddy 2 is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS&lt;/a&gt; support. For a &amp;quot;batteries included&amp;quot;
web server, it's rather surprising. Fortunately, one can use the following
&lt;a href="https://caddyserver.com/docs/caddyfile/concepts#snippets"&gt;Caddy snippet&lt;/a&gt; to augment any site with CORS headers without repeating oneself
over and over again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;, you might want to update the list of headers returned by
&lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt; and &lt;code&gt;Access-Control-Expose-Headers&lt;/code&gt; HTTP headers
according to your application needs. Please refer to the CORS documentation to
learn more what they mean.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(cors) {
  @cors_preflight method OPTIONS
  @cors header Origin {args.0}

  handle @cors_preflight {
    header Access-Control-Allow-Origin &amp;quot;{args.0}&amp;quot;
    header Access-Control-Allow-Methods &amp;quot;GET, POST, PUT, PATCH, DELETE&amp;quot;
    header Access-Control-Allow-Headers &amp;quot;Content-Type&amp;quot;
    header Access-Control-Max-Age &amp;quot;3600&amp;quot;
    respond &amp;quot;&amp;quot; 204
  }

  handle @cors {
    header Access-Control-Allow-Origin &amp;quot;{args.0}&amp;quot;
    header Access-Control-Expose-Headers &amp;quot;Link&amp;quot;
  }
}

example.com {
  import cors https://example.com
  reverse_proxy localhost:8080
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nice part about this snippet is that CORS headers are only returned for the
requests with &lt;code&gt;Origin&lt;/code&gt; HTTP header. That header is normally used by browsers
only, which means you won't see CORS headers in the responses for the requests
sent by &lt;code&gt;curl&lt;/code&gt; or your-programming-language-of-choice.&lt;/p&gt;
&lt;p&gt;I've been successfully using this snippet for quite a while now &lt;a href="https://github.com/xsnippet/xsnippet-infra/blob/1d583a6868597cb71bb2ae08f60bc42ac4364e91/roles/xsnippet_api/templates/caddy.j2#L1-L17"&gt;to protect&lt;/a&gt;
&lt;a href="https://github.com/xsnippet/xsnippet-api"&gt;xsnippet-api&lt;/a&gt; served at &lt;a href="https://api.xsnippet.org"&gt;api.xsnippet.org&lt;/a&gt;, so it can be used by
&lt;a href="https://github.com/xsnippet/xsnippet-web"&gt;xsnippet-web&lt;/a&gt; served at &lt;a href="https://xsnippet.org"&gt;xsnippet.org&lt;/a&gt;.&lt;/p&gt;
</content>
    <link href="https://kalnytskyi.com/posts/setup-cors-caddy-2/" rel="alternate"/>
    <published>2022-01-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://kalnytskyi.com/posts/setup-postgres-linux-windows-macos-gh-actions/</id>
    <title>Setup PostgreSQL for Linux, Windows and macOS using GitHub Actions</title>
    <updated>2022-04-23T18:30:39.393934+00:00</updated>
    <author>
      <name>Ihor Kalnytskyi</name>
    </author>
    <content type="html">&lt;p&gt;As of today (Nov 24, 2021), there's only &lt;a href="https://github.com/marketplace/actions/setup-postgresql-for-linux-macos-windows"&gt;one action on the marketplace&lt;/a&gt; to
setup a PostgreSQL server for Linux, Windows and macOS runners. If you among
those who want to test their software on all major platforms, you have no
option but to use &lt;a href="https://github.com/ikalnytskyi/action-setup-postgres"&gt;ikalnytskyi/action-setup-postgres&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup PostgreSQL&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ikalnytskyi/action-setup-postgres@v1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run tests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;CONNECTION_URI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.postgres.outputs.connection-uri }}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pytest -vv tests/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Key features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast bootstrap (the action uses preinstalled binaries).&lt;/li&gt;
&lt;li&gt;Fast audit (&lt;a href="https://github.com/ikalnytskyi/action-setup-postgres/blob/v1/action.yml"&gt;4 steps YAML&lt;/a&gt;, no javascript/typescript).&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link href="https://kalnytskyi.com/posts/setup-postgres-linux-windows-macos-gh-actions/" rel="alternate"/>
    <published>2021-11-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://kalnytskyi.com/posts/gnome-terminal-csd/</id>
    <title>Enable CSD in GNOME Terminal</title>
    <updated>2022-04-23T18:30:39.394104+00:00</updated>
    <author>
      <name>Ihor Kalnytskyi</name>
    </author>
    <content type="html">&lt;p&gt;If you aren't using GNOME but for some reason want to use GNOME Terminal in
other desktop environments (e.g. Sway or XFCE), you just might want to embrace
client-side decoration (&lt;a href="https://wiki.gnome.org/Initiatives/CSD"&gt;CSD&lt;/a&gt;), so it looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="headerbar.png" alt="gnome-terminal with csd" /&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, CSD is not used by GNOME Terminal if you launch it outside of
GNOME. Fortunately, there's a configuration option you can use to explicitly
enable it. In order to do that just run the following command in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gsettings set org.gnome.Terminal.Legacy.Settings headerbar true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please note, the setting won't be applied as long as there's a running copy
of &lt;code&gt;gnome-terminal-server&lt;/code&gt; process. You have to terminate it and restart the
terminal. The configuration option is tested with &lt;code&gt;gnome-terminal 3.40&lt;/code&gt;. It
might or might not work with other versions.&lt;/p&gt;
</content>
    <link href="https://kalnytskyi.com/posts/gnome-terminal-csd/" rel="alternate"/>
    <published>2021-10-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://kalnytskyi.com/posts/assert-str-matches-regex-in-pytest/</id>
    <title>Assert that str matches regex in pytest</title>
    <updated>2022-04-23T18:30:39.394270+00:00</updated>
    <author>
      <name>Ihor Kalnytskyi</name>
    </author>
    <content type="html">&lt;p&gt;Once in a while every Pythonista faces a need to test that some string value
matches a regex pattern. When it comes we have no option but to use &lt;code&gt;re&lt;/code&gt; module
directly.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_something_very_useful&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_some_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While it works fine in case of lone string, it's not always convenient to do
the same when a string is a part of more complex data structure (e.g. &lt;code&gt;dict&lt;/code&gt;),
because you need to extract the string, check it and only then get back to
check rest attributes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_something_even_more_useful&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_some_structure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# inconvenient and boring! :(&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# rest assertion&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fortunately, it's pretty easy to write convenient &lt;code&gt;pytest&lt;/code&gt; helper that would
check a pattern as a part of checking the whole data structure.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_something_even_more_useful&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_some_structure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pytest_regex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks better, huh? :) So the trick is done by the following few lines which
we're successfully using in &lt;a href="https://github.com/xsnippet/xsnippet-api"&gt;XSnippet API&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;pytest_regex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Assert that a given string meets some expectations.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, actually, it's not by any means tied to &lt;code&gt;pytest&lt;/code&gt; and could be used even
in non-test production code, though I found this rather queer.&lt;/p&gt;
</content>
    <link href="https://kalnytskyi.com/posts/assert-str-matches-regex-in-pytest/" rel="alternate"/>
    <published>2018-04-30T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://kalnytskyi.com/posts/farewell-2015/</id>
    <title>Farewell, 2015!</title>
    <updated>2022-04-23T18:30:39.394462+00:00</updated>
    <author>
      <name>Ihor Kalnytskyi</name>
    </author>
    <content type="html">&lt;p&gt;I'm a little late to sum up, but better now than never. :) Well, 2015 was a
year of travels. I've never visited before so many places in one year, just
look at the record:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Istanbul, Turkey&lt;/li&gt;
&lt;li&gt;Minsk, Belarus&lt;/li&gt;
&lt;li&gt;ZÃ¼rich, Switzerland&lt;/li&gt;
&lt;li&gt;Barcelona, Spain&lt;/li&gt;
&lt;li&gt;Toronto, Canada&lt;/li&gt;
&lt;li&gt;Niagara Falls, Canada&lt;/li&gt;
&lt;li&gt;Silicon Valley, USA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm so excited about them, and looking forward to have even more in 2016!&lt;/p&gt;
&lt;p&gt;As for my programming life, nothing special has happened except, perhaps,
that I started doing less coding that I'd want to. You see, in the end of
fall two events took place:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've been elected for Fuel-Python component lead position.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/Fuel"&gt;Fuel&lt;/a&gt; has joined OpenStack Big Tent umbrella.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now my main focus is to make design decisions and choose direction to go.
I barely have time for code review, but I hope it'll be resolved soon.&lt;/p&gt;
&lt;p&gt;Besides that, &lt;a href="https://holocron.readthedocs.org"&gt;Holocron&lt;/a&gt; - an extendable static site generator behind this
blog - was finally released. Thanks a lot to my friend &lt;a href="https://www.facebook.com/andrii.gamaiunov"&gt;Andrii Gamaiunov&lt;/a&gt;
for putting effort to make this happen. I'm glad to see how it's going despite
lack of time, though there're few major things to be done before I can say
&lt;em&gt;Â«It's 1.0 releaseÂ»&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Summarizing: 2015 was a good year, and I expect 2016 to be at least as good
as 2015 was, but hope it will be even better!&lt;/p&gt;
&lt;p&gt;Happy Holidays!&lt;/p&gt;
</content>
    <link href="https://kalnytskyi.com/posts/farewell-2015/" rel="alternate"/>
    <published>2016-01-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://kalnytskyi.com/posts/mad-map/</id>
    <title>Mad Map: Python Road</title>
    <updated>2022-04-23T18:30:39.394627+00:00</updated>
    <author>
      <name>Ihor Kalnytskyi</name>
    </author>
    <content type="html">&lt;p&gt;I use Python for several years and I used to think there was nothing in
the language that can surprise me. It was so until recently. The story
I want to tell is about how even so simple and well-known thing like &lt;code&gt;map()&lt;/code&gt;
function can surprise you after years of using, and why I believe it has
a bad design.&lt;/p&gt;
&lt;p&gt;So, what's wrong with &lt;code&gt;map()&lt;/code&gt;? We use it everyday and everywhere, and it
seems OK, and none of us met any problems. Yes, indeed, &lt;code&gt;map()&lt;/code&gt; works
just fine if you use it how it's intended to be used. For instance, if
you use &lt;code&gt;map()&lt;/code&gt; to multiply each element of some sequence by 2 -&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just keep going, everything's ok. But let me show another usage example -&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can you tell now what is &lt;code&gt;x&lt;/code&gt;, ha? I always thought that &lt;code&gt;map()&lt;/code&gt; function
receives precisely two arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a function to apply;&lt;/li&gt;
&lt;li&gt;a sequence to be processed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Can you imagine how I was surprised when it turned out that I was wrong?
But the most interesting part was further.&lt;/p&gt;
&lt;p&gt;I started guessing how &lt;code&gt;map()&lt;/code&gt; should behave in this case. What &lt;code&gt;None&lt;/code&gt; may
mean? I recall that if we pass &lt;code&gt;None&lt;/code&gt; as a function argument to &lt;code&gt;filter()&lt;/code&gt;
then it will return only those elements which are equal to &lt;code&gt;True&lt;/code&gt; in
boolean context. Hm, Perhaps &lt;code&gt;map()&lt;/code&gt; behaves similar to &lt;code&gt;filter()&lt;/code&gt;, and
will return a list of booleans? Let's check.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No, it's not :( So I went to the documentation and learned that if a function
argument is &lt;code&gt;None&lt;/code&gt;, the identity function is assumed. In other words it's
equal to the following call -&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait a minute. &lt;code&gt;None&lt;/code&gt; means identity?! Does it make sense? Perhaps if we're
talking about default behaviour, but it makes no sense from user point of
view. You know, it looks like &amp;quot;pass &lt;code&gt;None&lt;/code&gt; if you want to get identity
function behaviour&amp;quot;. But let's go on.&lt;/p&gt;
&lt;p&gt;I continued guessing about how &lt;code&gt;map()&lt;/code&gt; should deal with two iterables? It
was obvious to me that &lt;code&gt;map()&lt;/code&gt; should chain them: when first is over,
the second will be used.&lt;/p&gt;
&lt;p&gt;Let's back to the original code and original question.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is &lt;code&gt;x&lt;/code&gt;? Taking into account that was written above I was expecting
&lt;code&gt;x&lt;/code&gt; to be -&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Boom! I missed again, because &lt;code&gt;x&lt;/code&gt; was -&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And I stunned because that means these two iterables were zipped, not
chained. Why zipped? I never asked for this! Is this really Python?
I always liked this language because of good design and good intentions.
And when I didn't know something it always fitted my expectations, but
this is something really weird.&lt;/p&gt;
&lt;p&gt;I agree that someone may expect iterables to be zipped, but I'm upset
about opportunity itself to meet such unobvious construction. I wish
&lt;code&gt;map()&lt;/code&gt; to be plain and simple: receive one function and one iterable,
and leave zipping or chaining up to programmers. Moreover, I wish a
function argument to be always a function, no way to fallback to default
behaviour. If someone wants identity behaviour let's pass it explicitly,
no way to do it through &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The most frustrating thing is that it wasn't removed in Python 3, but
changed! First, you can't use &lt;code&gt;None&lt;/code&gt; as identity function anymore
(alleluia). If you try to do that you'll fall with &lt;code&gt;TypeError&lt;/code&gt; exception:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;TypeError: &lt;span class="s1"&gt;&amp;#39;NoneType&amp;#39;&lt;/span&gt; object is not callable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Second, iterables are zipped by &lt;code&gt;zip()&lt;/code&gt;, not &lt;code&gt;zip_longest()&lt;/code&gt;. If the
first change seems rational, the second one is mad. It doesn't provide
any benefits, but may cause a lot of pain for those who porting some
software to Python. Why? You see, if two iterables are equal in size
the behavior is still the same -&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;language / expression&lt;/th&gt;
&lt;th&gt;&lt;code&gt;map(lambda x: x, ['a', 'b'], [1, 2])&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python 2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[('a', 1), ('b', 2)]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python 3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[('a', 1), ('b', 2)]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;if not, it's different -&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;language / expression&lt;/th&gt;
&lt;th&gt;&lt;code&gt;map(lambda x: x, ['a', 'b', 'c'], [1, 2])&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python 2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[('a', 1), ('b', 2), ('c', None)]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python 3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[('a', 1), ('b', 2)]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I'm really really sad about such a mad &lt;code&gt;map()&lt;/code&gt; and I wish I never knew
about that. I don't know why it was designed so, but I hope none of
pythonistas will use it and one day it will be removed from the language.&lt;/p&gt;
</content>
    <link href="https://kalnytskyi.com/posts/mad-map/" rel="alternate"/>
    <published>2015-06-14T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://kalnytskyi.com/posts/docker-for-pythonistas/</id>
    <title>Docker For Pythonistas</title>
    <updated>2022-04-23T18:30:39.394789+00:00</updated>
    <author>
      <name>Ihor Kalnytskyi</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt;'s popularity is growing day by day and every last man wrote about
it. Well, I'm a slowpoke... so sorry if I wrote something you already know.
Anyway, if you're already familiar with Docker I'm not sure if that makes
sense for you to waste time and read this post; otherwise - you're welcome.&lt;/p&gt;
&lt;p&gt;My acquaintance with Docker began almost a year ago, when we decided to use
it as an upgrade mechanism in &lt;a href="https://wiki.openstack.org/wiki/Fuel"&gt;Fuel for OpenStack&lt;/a&gt;. For sure I learned a lot
about Docker since that time: I know about its limitations, pitfalls and
bugs; I even know how to run the latest version (v1.4.1) on CentOS 6.5 with
old Linux kernel.&lt;/p&gt;
&lt;p&gt;In this post I'm not going to tell you about all possible use cases for
Docker or about its internals and limitations. Instead, I'll try to focus on
the daily usage flow and why I found it useful for myself and why it might
be useful for Pythonistas in general.&lt;/p&gt;
&lt;p&gt;Iâ€™ll try to be straight to the point, but before we go further let's answer
the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the most common &amp;quot;action&amp;quot; for programmers?&lt;/li&gt;
&lt;li&gt;What is the second most common &amp;quot;action&amp;quot; for programmers?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, obviously, an answer to the first question is &lt;em&gt;to write code&lt;/em&gt;.
Programmers are supposed to write code, they're doing it almost every day
and it takes a lot of their time.&lt;/p&gt;
&lt;p&gt;And what about the second question? The answer is &lt;em&gt;to run tests&lt;/em&gt; in order to
be sure that nothing is broken. Unfortunately, it may not be as easy as it
seems. You know, a lot of Python software is supposed to be run on various
Python interpreters: it may be a set of Py2 interpreters or even both Py2
and Py3 interpreters. So for proper testing the tests should be run against
a certain set of Python interpreters, but what to do if some of them are
unavailable for your Linux distributive?&lt;/p&gt;
&lt;p&gt;This is where Docker is going to help us.&lt;/p&gt;
&lt;p&gt;Docker is a platform for building, shipping and running containers. In other
words it allows you to prepare an image with some software, push it to
docker registry (sort of repository) and pull it wherever you want to run.&lt;/p&gt;
&lt;p&gt;I came to it when I needed to run tests against Python 2.6 and this
interpreter wasn't available for Debian Jessie. So I spent some time and
built a &lt;a href="https://github.com/ikalnitsky/pythonista"&gt;pythonista docker image&lt;/a&gt; that contained the most popular Python
interpreters. It's very convenient since anyone can pull this image and use
it to run tests. If you aren't satisfied by my image, you can always build
your own - it's not a challenge.&lt;/p&gt;
&lt;p&gt;Tests could be run in the container with just a single command, no
pre-configuration is required, but pull the image. The whole workflow could
look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ docker pull ikalnitsky/pythonista
$ docker run -v /path/to/src/:/src -w /src ikalnitsky/pythonista tox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For those who aren't familiar with Docker, the first command retrieves the
image from the Docker registry and the second one runs a container created
from it. The arguments are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v /path/to/src:/src&lt;/code&gt; - mounts &lt;code&gt;/path/to/src&lt;/code&gt; from your host machine
into &lt;code&gt;/src&lt;/code&gt; inside your container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w /src&lt;/code&gt; - change current working directory inside container to &lt;code&gt;/src&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ikalnitsky/pythonista&lt;/code&gt; - obviously, use this image for container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tox&lt;/code&gt; - run tox (a test runner tool)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So why Docker? What does it bring to you? It saves your time and nerves
because you don't need to compile missed Python interpreters on every
machine you're working on. Still, this is one of possible Docker use cases,
so don't hesitate to find your own.&lt;/p&gt;
</content>
    <link href="https://kalnytskyi.com/posts/docker-for-pythonistas/" rel="alternate"/>
    <published>2015-02-03T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://kalnytskyi.com/posts/c-legacy-is-evil/</id>
    <title>C Legacy Is ðŸ˜ˆ Evil</title>
    <updated>2022-04-23T18:30:39.395681+00:00</updated>
    <author>
      <name>Ihor Kalnytskyi</name>
    </author>
    <content type="html">&lt;p&gt;When people ask me Â«What is the first thing I don't like in C++?Â», I
always answer that's a C legacy. I know a lot of C++ bottlenecks, but I
believe that the worst of them is the C legacy.  What do I mean by the
Â«C legacyÂ»? I mean all this stuff that doesn't fit into C++ ideology and
kept in the language for compatibility reason. It was a great advantage
years ago, and it's a worst drawback today.&lt;/p&gt;
&lt;p&gt;I have a story as a good example of what I'm talking about. When I was
working at &lt;a href="http://www.gameloft.com/"&gt;Gameloft&lt;/a&gt;, I was involved in &lt;a href="https://itunes.apple.com/us/app/blitz-brigade-online-multiplayer/id580175049?mt=8"&gt;Blitz Brigade&lt;/a&gt; project. In the
very late 2013, the HQ decided to revive Android port and I was chosen
to help Android guys to run both server and client sides of the game.&lt;/p&gt;
&lt;p&gt;One day an Android guy asked me for help with debugging. His client
application was rejected by the server and he couldn't figure out why
it's happened. Diving in the code, I have found a typical mistake often
occurring in the C world. The interesting thing was that the mistake was
widespread and should have affected both iOS and Android versions.
However, there was 100% reproduce rate for Android version, while for
iOS it haven't been found yet.&lt;/p&gt;
&lt;p&gt;Well, let's look at this typical C code that converts a datetime to Unix
timestamp:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cpp"&gt;&lt;span class="c1"&gt;// year, month, day, hour, min and sec are retrieved from&lt;/span&gt;
&lt;span class="c1"&gt;// network and have valid values&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;tm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what's wrong with this code? In first look - nothing is wrong, but for
some reason the resulting &lt;code&gt;time&lt;/code&gt; variable was &lt;code&gt;0&lt;/code&gt; on Android and a valid
timestamp on iOS. If you come from C world you probable suspect that the
issue is that the &lt;code&gt;tm_struct&lt;/code&gt; variable isn't cleared before usage. In C
world we have an unspoken rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always use &lt;code&gt;memset&lt;/code&gt; onto struct variable before usage, because by
default it's filled with garbage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cpp"&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;tm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_struct&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same rule is also applied in C++ world if we're talking about C
structs, not C++ ones which might be filled properly by means of
constructors. But the &lt;code&gt;tm_struct&lt;/code&gt; is a C struct, thus it knows nothing
about constructors and we have to clear it manually.&lt;/p&gt;
&lt;p&gt;Actually, the idea is not &lt;em&gt;to clear&lt;/em&gt;, but &lt;em&gt;to initialize&lt;/em&gt; all members.
It seems like we do initialize all &lt;code&gt;tm&lt;/code&gt;'s members, but we are actually
not. Unfortunately, the &lt;code&gt;tm_struct&lt;/code&gt; has one more field - &lt;code&gt;tm_isdst&lt;/code&gt; -
which is still filled with garbage and leads to mistaken result.&lt;/p&gt;
&lt;p&gt;Ok, so why then it works on iOS most of the time and always fails on
Android? I don't know, it just happened and that's all. I think it's
happened because of compiler that may add some clearing code for us
automatically, but I may be wrong.&lt;/p&gt;
&lt;p&gt;Why is it so dangerous? Why is there a huge pitfall for C++ in my
opinion?&lt;/p&gt;
&lt;p&gt;I believe that C and C++ are different languages with different
ideologies, but with similar syntax. If you wrote your own struct in
C++, you have to define constructor to initialize all members with some
default values. Thus C++ developers don't expect &lt;code&gt;memset&lt;/code&gt; right after
struct definition, they're relying on constructors which do that thing
for them.&lt;/p&gt;
&lt;p&gt;In real world applications built for different platforms using different
compilers it may be a big challenge to debug because the bug may be
floating, so you spent a lot of time to catch it.&lt;/p&gt;
&lt;p&gt;So you should be mindful writing programs in C++, since you can fall
into deep hole of C legacy.&lt;/p&gt;
</content>
    <link href="https://kalnytskyi.com/posts/c-legacy-is-evil/" rel="alternate"/>
    <published>2014-10-25T00:00:00+00:00</published>
  </entry>
</feed>
