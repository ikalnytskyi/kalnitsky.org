=============
My Vim config
=============

:author: Igor Kalnitsky
:date: 02.03.2011
:tags: vim
:slug: my-vim-configuration

.. role:: strike
    :class: strike

Какой же блог программиста без поста про текстовый редактор?
И какой же это блог :strike:`задрота` программиста, если этим текстовым
редактором не окажется **Vim** или **Emacs**?

.. image:: /static/images/2011/editors-comparision.jpg
    :alt: Editor comparision
    :align: center

В мире никсов существует извечная борьба: *emacs* vs *vim*. Споры, бывает,
доходят до абсурда. Но меня это абсолютно не волнует, так как я оцениваю вещи
удобством, а не чужими доводами.

**Vim** — это чудный и фантастический редактор, который напрочь отбивает
желание осваивать его у новичков. Но все же, если решишься его освоить, он
покорит своей простотой и удобством (удобством, которое изначально кажется
некой дьявольщиной). Одним из ключей к успеху использования **Vim** является,
так называемый, *vimconfig*. Это конфигурация редактора, которая настраивает
его под ваш вкус и лад, позволяя тем самым превратить его в полнофункциональное
IDE.

Наконец пришло время и мне взяться за конфигурирование редактора. В целом, в
сети полно готовых конфигураций, с минимальными изменениями которых можно с
удобством использовать редактор. Но всегда приятно, когда в этой конфигурации
ты знаешь всё. :) Одной из причин, по которой я не брался за конфигурирование
ранее, была причина *ужасной структуры* каталога с настройками: всё сливалось
в одну единую кучу, в которой ни только нельзя было разобраться
"где какой плагин", но и вообще было страшно смотреть. К счастью, мне на
галаза попался одни чудесный плагин: **pathogen**, который решает эту
проблему. Этот плагин сканирует специальную директорию с плагинами и добавляет
их в *Vim Runtime Path*, что делает их работоспособными.

А теперь несколько слов о моей конфигурации:

* Цветовая схема: xoria256.
* Автодополнение для языков: C/C++/Python.
* Для C/C++ файлов, клавиша F4 позволяет переключатся между .hpp и .cpp файлами.
* Для языка Python ошибки подсвечиваются в режиме realtime (не обязательно
  отправлять файл в интерпретатор).
* Благодаря clang, подсвечивание ошибок realtime стало возможно и для C/C++.
* XPTemplates - позволяет по Ctrl+\ вставлять шаблоны.
* F3 - Окно файлового менеджера - для быстрого открытия файла (NERDTree).
   Позволяет открывать в новом буфере или же табе.
* F5 - вызов утилиты make.
* Ctrl + F6 - включение/отключение проверки орфографии.
* F6 - исправление орфографической ошибки.
* F9 - переключение между текстовым и hex режимами.
* F11 - скрыть/показать окно QuickFix. Данное окно отображает ошибки найденные
  в файле: пропущена запятая, отсутствует закрывающая скобочка и прочие
  синтаксические ошибки.
* Может что-то и еще, о чем я забыл :)

Расположена моя конфигурация в git-репозитарии:
<https://github.com/ikalnitsky/vim-config>
